---
description: Package manager rules
globs: **/*.(ts|tsx|json)
alwaysApply: false
---
# Package Manager Rules

## Primary Package Manager: bun.js

This project uses **bun.js** as the exclusive package manager. All package operations must be performed using bun.

## Rules

1. **Always use bun for all package operations:**

   - Installing packages: `bun add <package-name>`
   - Removing packages: `bun remove <package-name>`
   - Installing dev dependencies: `bun add -d <package-name>`
   - Updating packages: `bun update <package-name>`
   - Running scripts: `bun run <script-name>`

2. **Never use npm, yarn, or pnpm commands** in this project.

3. **For shadcn components:**

   - When the shadcn CLI suggests using npm, yarn, or pnpm, always translate the commands to bun equivalents.
   - Example: If shadcn suggests `npx shadcn-ui@latest add button`, use `bunx shadcn-ui@latest add button` instead.
   - For shadcn installation: `bunx shadcn-ui@latest init`

4. **Dependency management:**

   - The project uses `bun.lockb` for lock file management.
   - Do not commit `package-lock.json`, `yarn.lock`, or `pnpm-lock.yaml` files.

5. **CI/CD considerations:**
   - All CI/CD pipelines should use bun for installing dependencies and running scripts.
   - Example: `bun install` instead of `npm install`

## Bun Commands Reference

| Operation            | Bun Command        | npm Equivalent                 |
| -------------------- | ------------------ | ------------------------------ |
| Install dependencies | `bun install`      | `npm install`                  |
| Add a dependency     | `bun add <pkg>`    | `npm install <pkg>`            |
| Add a dev dependency | `bun add -d <pkg>` | `npm install --save-dev <pkg>` |
| Remove a dependency  | `bun remove <pkg>` | `npm uninstall <pkg>`          |
| Run a script         | `bun run <script>` | `npm run <script>`             |
| Execute a package    | `bunx <pkg>`       | `npx <pkg>`                    |

## Shadcn with Bun

When using shadcn UI components with bun:

1. Initialize shadcn with bun:

   ```bash
   bunx shadcn-ui@latest init
   ```

2. Add components with bun:

   ```bash
   bunx shadcn-ui@latest add button
   bunx shadcn-ui@latest add card
   # etc.
   ```

3. For any shadcn documentation that references npm/yarn/pnpm, mentally substitute with the bun equivalent.

## Troubleshooting

If you encounter issues with bun and shadcn integration:

1. Ensure you're using the latest version of bun: `bun upgrade`
2. Check that shadcn-ui is compatible with your current setup
3. For specific component issues, refer to the shadcn documentation and translate npm commands to bun
