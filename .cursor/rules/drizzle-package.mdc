---
description: Best Practices for database management with drizzle-orm
globs: packages/db/**/*.ts
alwaysApply: false
---
# Cursor Rules for DB Package with Drizzle ORM

## Package Structure

```
packages/db/
├── src/
│   ├── index.ts       # Main entry point with database client setup
│   ├── schema.ts      # Database schema definitions
│   ├── migrations/    # Database migrations
│   │   ├── migrate.ts # Migration script
│   │   └── *.sql      # SQL migration files
│   └── orm.ts         # Additional ORM utilities
├── seed.ts            # Database seeding script
├── package.json
├── tsconfig.json
├── drizzle.config.ts  # Drizzle configuration
└── .env.local         # Local environment variables
```

## Database Choice

**Always use PostgreSQL** for production applications. The current implementation is configured for PostgreSQL, which offers the best combination of features, reliability, and performance for most applications.

## Configuration Rules

### 1. Package Dependencies

- **Required Dependencies**:
  - `drizzle-orm`: Latest stable version
  - `drizzle-kit`: Latest stable version
  - `postgres`: For PostgreSQL connection

- **Optional Dependencies**:
  - `@inquirer/prompts`: For interactive CLI tools
  - `figlet`: For CLI banners
  - `ora`: For CLI spinners
  - `nanoid`: For ID generation
  - `chalk`: For CLI styling

### 2. Package.json Configuration

```json
{
    "name": "@auth-apps/db",
    "version": "0.0.0",
    "private": true,
    "main": "./src/index.ts",
    "types": "./src/index.ts",
    "scripts": {
        "build": "bun build ./src/index.ts --outdir ./dist",
        "clean": "rm -rf .turbo && rm -rf node_modules && rm -rf dist",
        "dev": "bun run --watch src/index.ts",
        "lint": "eslint \"src/**/*.ts\"",
        "db:generate": "bunx drizzle-kit generate:pg",
        "db:migrate": "bun run src/migrations/migrate.ts",
        "db:studio": "bunx drizzle-kit studio",
        "db:seed": "bun run seed.ts"
    }
}
```

### 3. Drizzle Configuration

#### Migration Generation and Execution

**Always follow this process for migrations:**

1. **Generate migrations** using the command:
   ```
   bun run db:generate
   ```

2. **Review the generated SQL files** in the `src/migrations` directory.

3. **For data tables that should be hypertables:**
   - Edit the generated SQL migration file
   - Add the SQL command to convert the table to a hypertable after the table creation
   - Example:
     ```sql
     -- After the CREATE TABLE statement
     SELECT create_hypertable('table_name', 'time_column_name');
     ```

4. **Apply migrations** using the command:
   ```
   bun run db:migrate
   ```

Example migration script in `src/migrations/migrate.ts`:

```typescript
import type { Config } from "drizzle-kit";
import { defineConfig } from "drizzle-kit";

export default defineConfig({
    schema: "./src/schema.ts",
    out: "./src/migrations",
    dialect: "postgresql",
    dbCredentials: {
        url: process.env.DATABASE_URL || 
             "postgres://postgres:postgres@localhost:5432/auth_apps",
    },
}) satisfies Config;
```

## Code Structure Rules

### 1. Schema Definitions

- Place all schema definitions in `src/schema.ts`
- Define tables using `pgTable` from `drizzle-orm/pg-core`
- Export inferred types for each table
- Use UUID as primary keys with `defaultRandom()`
- Define relationships using references

Example schema structure:

```typescript
import { pgTable, text, timestamp, uuid, boolean } from "drizzle-orm/pg-core";

export const users = pgTable("users", {
    id: uuid("id").primaryKey().defaultRandom(),
    email: text("email").notNull().unique(),
    password: text("password").notNull(),
    name: text("name"),
    createdAt: timestamp("created_at").defaultNow().notNull(),
    updatedAt: timestamp("updated_at").defaultNow().notNull(),
    role_id: uuid("role_id").references(() => roles.id),
});

export type User = typeof users.$inferSelect;
export type NewUser = typeof users.$inferInsert;
```

### 2. Database Client

Create a reusable database client in `src/index.ts`:

```typescript
import { drizzle } from "drizzle-orm/postgres-js";
import postgres from "postgres";
import * as schema from "./schema";

// Database connection string from environment variable
const connectionString = process.env.DATABASE_URL || 
    "postgres://postgres:postgres@localhost:5432/auth_apps";

// Create postgres connection
const client = postgres(connectionString, {
    max: 10, // Max number of connections
});

// Create drizzle database instance
export const db = drizzle(client, { schema });

export type Database = typeof db;

// Export schema for use in other packages
export * from "./schema";
```

### 3. Migrations

Create a migration script in `src/migrations/migrate.ts`:

```typescript
import { migrate } from "drizzle-orm/postgres-js/migrator";
import { db } from "../index";

// This will run migrations on the database, creating tables if they don't exist
async function main() {
    console.log("Running migrations...");

    try {
        await migrate(db, { migrationsFolder: "./src/migrations" });
        console.log("Migrations complete!");
    } catch (error) {
        console.error("Migration failed:", error);
        process.exit(1);
    }

    process.exit(0);
}

main();
```

### 4. Seeding

Create a seed script in `seed.ts` for populating the database with initial data:

```typescript
#!/usr/bin/env bun

import { db, users, roles, permissions, role_permissions } from "./src";
import { input, confirm, password, select } from "@inquirer/prompts";
import chalk from "chalk";
import ora from "ora";

async function main() {
    // Seed logic here
}

main().catch((error) => {
    console.error("Seeding failed:", error);
    process.exit(1);
});
```

## Usage Rules

### 1. Importing in Other Packages

```typescript
// From another package in the monorepo
import { db, users, User } from "@auth-apps/db";

// Example query
const allUsers = await db.select().from(users);
```

### 2. Environment Variables

- Store database connection strings in environment variables
- Use `.env.local` for local development
- Configure environment variables in your deployment platform
- Always use connection pooling in production environments

### 3. Integration with API Applications

For API applications in the monorepo:

```typescript
// api/routes/users.ts
import { db, users } from "@auth-apps/db";
import { Elysia } from "elysia";

export const usersRoute = new Elysia()
  .get("/users", async () => {
    const allUsers = await db.select().from(users);
    return allUsers;
  });
```

## Best Practices

1. **Type Safety**: Always use the inferred types from your schema definitions
2. **Transactions**: Use transactions for operations that require multiple queries
3. **Prepared Statements**: Use prepared statements for queries with parameters
4. **Migrations**: Always run migrations in CI/CD pipelines before deployment
5. **Connection Pooling**: For production, implement connection pooling
6. **Error Handling**: Implement proper error handling for database operations
7. **PostgreSQL Features**: Leverage PostgreSQL-specific features like JSON columns, full-text search, and array types
8. **Hypertables for Time-Series Data**: Use TimescaleDB hypertables for time-series data by modifying migration files

## Common Pitfalls to Avoid

1. **Connection Leaks**: Always close database connections when using direct drivers
2. **Large Transactions**: Avoid extremely large transactions that could lock the database
3. **Raw SQL**: Minimize use of raw SQL to maintain type safety
4. **Schema Drift**: Keep migrations and schema definitions in sync
5. **Environment Mixing**: Don't use production database in development environments
6. **Missing Hypertable Conversion**: For time-series data, always check if a table should be converted to a hypertable

## Testing

1. Create a separate test database configuration
2. Use a dedicated PostgreSQL test database for integration tests
3. Consider using Docker containers for isolated test environments
4. Implement test helpers for database setup and teardown

## Monorepo Integration

1. Add the db package to the appropriate workspace in `turbo.json`:

```json
{
  "$schema": "https://turbo.build/schema.json",
  "pipeline": {
    "build": {
      "dependsOn": ["^build"],
      "outputs": ["dist/**"]
    },
    "db:generate": {
      "cache": false
    },
    "db:migrate": {
      "cache": false
    },
    "db:seed": {
      "cache": false
    }
  }
}
```

2. Configure package dependencies in apps that use the db package

