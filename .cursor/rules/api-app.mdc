---
description: API for backend application with Elysia.js
globs: 
alwaysApply: false
---
# Backend Rules for Cursor

## Technology Stack

- ElysiaJS (v1.2.25) - Fast and type-safe web framework
- Drizzle ORM (v0.39.1) - Type-safe ORM for PostgreSQL
- Redis (via ioredis v5.3.2) - For session management and caching
- PostgreSQL (via postgres.js v3.4.3) - Main database
- Node.js Cluster - For multi-core utilization
- Bun - JavaScript runtime and package manager

## Project Structure

```
.
├── apps/
│   └── api/
│       ├── src/
│       │   ├── controllers/
│       │   │   └── v1/
│       │   │       ├── users/
│       │   │       │   ├── controller.ts    # User controller
│       │   │       │   └── user.dto.ts      # User DTOs
│       │   │       ├── roles/
│       │   │       ├── permissions/
│       │   │       └── index.ts             # V1 API routes
│       │   ├── services/
│       │   │   ├── cache.ts                 # Cache service
│       │   │   └── index.ts                 # Service exports
│       │   ├── connections.ts               # Redis connection
│       │   ├── context.ts                   # Elysia context with auth
│       │   ├── app.ts                       # Main app setup
│       │   └── index.ts                     # Entry point with cluster
│       ├── package.json                     # API dependencies
│       └── tsconfig.json                    # TypeScript config
├── packages/
│   └── db/
│       ├── src/
│       │   ├── migrations/                  # Database migrations
│       │   ├── schema.ts                    # Drizzle schema definitions
│       │   ├── orm.ts                       # ORM exports
│       │   └── index.ts                     # Database connection
│       ├── drizzle.config.ts                # Drizzle configuration
│       └── package.json                     # DB package dependencies
├── package.json                             # Root dependencies
└── tsconfig.json                            # Root TypeScript config
```

## ElysiaJS Best Practices

### Method Chaining

MUST use method chaining for type safety:

```typescript
new Elysia()
  .use(cors())
  .use(cookie())
  .use(v1Controller)
  .listen(3000);
```

### Controller Structure

Each controller should be a separate Elysia instance with a specific prefix:

```typescript
// apps/api/src/controllers/v1/users/controller.ts
export const userController = new Elysia({
  name: "@api/v1/users",
  prefix: "/users"
})
  .use(ctx)
  .post("/login", async ({ body, db, error, cacheService, cookie }) => {
    // Controller logic
  });
```

Example of CRUD controller:

```typescript
import { permissions } from "@auth-apps/db";
import { eq, sql } from "../../../../../../packages/db/src/orm";
import ctx from "../../../context";
import Elysia, { error, t } from "elysia";

export const permissionsController = new Elysia({
    name: "@app/permissions",
    prefix: "/permissions",
    detail: {
        tags: ["Permissions"],
        summary: "Get all permissions",
        description: "Get all permissions"
    }
})
    .use(ctx)
    .get('/', async ({
        user,
        error,
        db,
        query: {
            page,
            limit
        }
    }) => {
        if (!user) {
            return error(401, "Unauthorized");
        }

        // Convert page and limit to numbers
        const pageNum = Number(page);
        const limitNum = Number(limit);

        // Calculate offset
        const offset = (pageNum - 1) * limitNum;

        const [totalCountResult, permissionsList] = await Promise.all([
            db.select({
                count: sql`count(*)`
            }).from(permissions),
            db.select().from(permissions).limit(limitNum).offset(offset)
        ]);

        const totalCount = Number(totalCountResult[0].count);

        // Calculate pagination metadata
        const totalPages = Math.ceil(totalCount / limitNum);

        return {
            permissions: permissionsList,
            pagination: {
                total: totalCount,
                page: pageNum,
                limit: limitNum,
                totalPages
            }
        };
    }, {
        query: t.Object({
            page: t.Optional(t.Numeric({ default: 1 })),
            limit: t.Optional(t.Numeric({ default: 10 }))
        }),
        permission: "permissions.list"
    })
    .get('/:id', async ({
        user,
        error,
        db,
        params: {
            id
        }
    }) => {
        if (!user) {
            return error(401, "Unauthorized");
        }

        const permission = await db.select().from(permissions).where(eq(permissions.id, id));

        return {
            permission: permission[0]
        };
    }, {
        params: t.Object({
            id: t.String()
        }),
        permission: "permissions.list"
    })
    .post('/', async ({
        user,
        error,
        db,
        body
    }) => {
        if (!user) {
            return error(401, "Unauthorized");
        }

        const { name, code } = body;

        const permission = await db.insert(permissions).values({
            name,
            code
        });

        return {
            permission: permission[0]
        };
    }, {
        body: t.Object({
            name: t.String(),
            code: t.String()
        }),
        permission: "permissions.edit"
    })
    .put('/:id', async ({
        user,
        error,
        db,
        params: {
            id
        },
        body: {
            name, code
        }
    }) => {
        if (!user) {
            return error(401, "Unauthorized");
        }


        const permission = await db.update(permissions).set({
            name,
            code
        }).where(eq(permissions.id, id));

        return {
            permission: permission[0]
        };
    }, {
        params: t.Object({
            id: t.String()
        }),
        body: t.Object({
            name: t.String(),
            code: t.String()
        }),
        permission: "permissions.edit"
    })
    .delete('/:id', async ({
        user,
        error,
        db,
        params: {
            id
        }
    }) => {
        if (!user) {
            return error(401, "Unauthorized");
        }

        await db.delete(permissions).where(eq(permissions.id, id));

        return {
            message: "Permission deleted successfully"
        };
    }, {
        params: t.Object({
            id: t.String()
        }),
        permission: "permissions.edit"
    });

```


### Context Setup

Use a shared context for common functionality:

```typescript
// apps/api/src/context.ts
const ctx = new Elysia({
  name: "@app/ctx"
})
  .decorate("db", db)
  .decorate("redis", redis)
  .decorate("cacheService", new CacheService(redis, db))
  .macro({
    useAuth(enabled: boolean = true) {
      // Authentication macro implementation
    }
  });
```

### Error Handling

Must implement error handling at the root level:

```typescript
new Elysia().onError(({ error, code }) => {
  if (code === "NOT_FOUND") return "Not Found :(";
  console.error(error);
  return { success: false, message: error.message };
});
```

### Type Safety

1. Use TypeScript for type definitions
2. Define models using Elysia's type system:

```typescript
.model({
  user: t.Object({
    email: t.String(),
    password: t.String()
  })
})
```

## Dependencies Setup

```json
{
  "dependencies": {
    "@auth-apps/db": "workspace:*",
    "@elysiajs/cookie": "^0.8.0",
    "@elysiajs/cors": "^1.2.0",
    "@elysiajs/swagger": "^1.2.2",
    "drizzle-orm": "^0.39.1",
    "elysia": "^1.2.25",
    "ioredis": "^5.3.2",
    "ms": "^2.1.3",
    "postgres": "^3.4.3"
  },
  "devDependencies": {
    "@types/bun": "^1.2.4",
    "@types/ms": "^2.1.0",
    "@types/node": "^20.11.19",
    "bun-types": "latest",
    "eslint": "^8.56.0",
    "typescript": "^5.8.2"
  }
}
```

## Authentication Rules

1. The `useAuth` macro must:
   - Be implemented in the context.ts file
   - Accept an `enabled` boolean parameter
   - Check session token from cookie if enabled
   - Verify session existence in Redis
   - Add user data to context if valid
   - Return 403 error if unauthorized

```typescript
// Example usage in routes
app.get(
  "/protected",
  ({ user }) => ({ message: "Protected route", user }),
  { beforeHandle: ({ useAuth }) => useAuth() }
);
```

## Cache Service Rules

1. Cache service should:
   - Handle caching of frequently accessed data (roles, permissions)
   - Provide methods for session management
   - Use Redis for storage
   - Include proper error handling

```typescript
// apps/api/src/services/cache.ts
export class CacheService {
  constructor(private readonly redis: Redis, private readonly db: Database) {
    this.cacheRoles();
    this.cachePermissions();
  }

  async cacheRoles() {
    // Implementation
  }

  async setUserSession(userData: UserData) {
    // Implementation
  }
}
```

## Cluster Configuration Rules

1. Must use Node.js native cluster module
2. Number of workers should match available CPU cores
3. Must automatically restart dead workers
4. Each worker should:
   - Have its own database connection
   - Have its own Redis connection
   - Listen on the same port

```typescript
// apps/api/src/index.ts
import cluster from "node:cluster";
import { cpus } from "node:os";

const numCPUs = cpus().length;

if (cluster.isPrimary) {
  console.log(`Primary ${process.pid} is running`);

  for (let i = 0; i < numCPUs; i++) {
    cluster.fork();
  }

  cluster.on("exit", (worker, code, signal) => {
    console.log(`Worker ${worker.process.pid} died`);
    cluster.fork();
  });
} else {
  app.listen(process.env.PORT || 3000);
}
```


## Environment Variables Rules

Required environment variables:

```env
DATABASE_URL=postgres://postgres:postgres@localhost:5432/auth_apps
REDIS_URL=redis://localhost:6379
PORT=3000
NODE_ENV=development
```

## Database Connection Rules

1. PostgreSQL connection MUST be in packages/db:

```typescript
// packages/db/src/index.ts
import { drizzle } from "drizzle-orm/postgres-js";
import postgres from "postgres";
import * as schema from "./schema";

const connectionString = process.env.DATABASE_URL;
const client = postgres(connectionString, { max: 10 });
export const db = drizzle(client, { schema });
export type Database = typeof db;
```

2. Redis connection must:
   - Be in a separate connections.ts file
   - Handle connection failures
   - Implement reconnection strategy
   - Use ioredis for type safety

```typescript
// apps/api/src/connections.ts
import { Redis } from "ioredis";

const redis = new Redis(process.env.REDIS_URL, {
  keyPrefix: "auth-apps-api:",
});

redis.on("error", (err) => {
  console.error("Redis connection error:", err);
});

export { redis };
```

## Error Handling Rules

1. Database errors must be caught and logged
2. Redis connection failures must not crash the application
3. Authentication failures must return proper HTTP status codes
4. All errors must include appropriate error messages
5. Use Elysia's error handling system

## Performance Rules

1. Use node:cluster for multi-core utilization
2. Implement connection pooling for database
3. Use Redis for session management
4. Implement proper error handling and logging
5. Use Elysia's built-in performance optimizations

## Security Rules

1. All authentication tokens must be:

   - Stored in HttpOnly cookies
   - Secured with proper flags (Secure, SameSite)
   - Have appropriate expiration times

2. Session data must be:
   - Encrypted in transit
   - Stored securely in Redis
   - Properly invalidated when needed
  
3. Implement role-based access control:
   - Use roles and permissions tables
   - Cache roles and permissions in Redis
   - Check permissions before handling requests

## Development Rules

1. Use TypeScript for type safety
2. Follow Elysia's method chaining pattern
3. Use Redis for session management and caching
4. Follow consistent code formatting
5. Document all major components
6. Use Elysia's plugin system for modularity

## Testing Rules

1. Write unit tests for critical paths
2. Test authentication flows
3. Test database operations
4. Test Redis operations
5. Test cluster behavior
6. Use Elysia's built-in testing utilities

## Deployment Rules

1. Use proper process management
2. Implement health checks
3. Monitor cluster status
4. Handle graceful shutdowns
5. Implement proper logging
6. Use Elysia's production optimizations

## Maintenance Rules

1. Regular dependency updates
2. Security patch management
3. Database maintenance
4. Redis maintenance
5. Log rotation
6. Monitor Elysia version updates
