---
description: 
globs: apps/web/**/*.ts,apps/web/**/*.tsx,apps/dashboard/**/*.ts,apps/dashboard/**/*.tsx
alwaysApply: false
---
# Next.js Website Development Rules

## Project Structure and Configuration

### Directory Structure

```

├── app/                    # App router directory
│   ├── [locale]/          # i18n routing with next-intl
│   │   ├── dashboard/     # Dashboard routes
│   │   ├── login/         # Authentication routes
│   │   └── page.tsx       # Main page for locale
│   ├── layout.tsx         # Root layout
│   ├── globals.css        # Global styles
│   └── providers.tsx      # Client providers
├── messages/              # Translation messages
├── components/            # React components
│   ├── ui/               # UI components (shadcn/ui)
│   └── [feature]/        # Feature-specific components
├── lib/                  # Utility functions and configurations
│   ├── utils.ts          # Utility functions
│   ├── eden.ts           # Elysia.js API client
│   ├── get-query-client.ts # React Query client
│   └── auth.ts           # Authentication utilities
├── hooks/               # Custom hooks
│   ├── useAuth.ts       # Authentication hook
│   └── use-mobile.ts    # Responsive design hook
├── store/               # State management
│   └── [feature]-store.ts # Feature-specific stores
├── i18n/                 # i18n configs
│   ├── routing.ts        # i18n routing config
│   ├── navigation.ts     # i18n navigation config
│   ├── request.ts        # i18n request config
├── public/                # Static assets
├── middleware.ts         # Next.js middleware (auth, i18n)
├── components.json       # shadcn/ui configuration
├── next.config.ts        # Next.js configuration
└── tailwind.config.ts    # Tailwind configuration
```

### Dependencies

```json
{
  "dependencies": {
    "@elysiajs/eden": "^1.2.0",
    "@hookform/resolvers": "^4.1.3",
    "@radix-ui/react-slot": "^1.1.2",
    "@tailwindcss/postcss": "^4.0.9",
    "@tailwindcss/typography": "^0.5.16",
    "@tanstack/react-query": "^5.67.1",
    "@tanstack/react-table": "^8.21.2",
    "@tanstack/react-query-devtools": "^5.67.1",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "motion": "^12.4.10",
    "lucide-react": "^0.477.0",
    "next": "^15.0.0",
    "next-intl": "^3.26.5",
    "nuqs": "^2.4.0",
    "postcss": "^8.5.3",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-hook-form": "^7.54.2",
    "sonner": "^2.0.1",
    "tailwind-merge": "^3.0.2",
    "tailwindcss": "^4.0.9",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^3.24.2"
  },
  "devDependencies": {
    "@types/bun": "^1.2.4",
    "@types/node": "^22.13.9",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "eslint": "^9.21.0",
    "eslint-config-next": "^15.2.1",
    "typescript": "^5.8.2"
  }
}
```

## Internationalization with next-intl

### 1. i18n Configuration

```typescript
// i18n/routing.ts
import { defineRouting } from 'next-intl/routing';

export const routing = defineRouting({
  // A list of all locales that are supported
  locales: ["en", "ru"],

  // Used when no locale matches
  defaultLocale: "ru",
});

// i18n/navigation.ts
import { createNavigation } from "next-intl/navigation";
import { routing } from "./routing";

export const { Link, redirect, usePathname, useRouter, getPathname } = createNavigation(routing);
```

### 2. Middleware Configuration

```typescript
// middleware.ts
import { NextRequest, NextResponse } from "next/server";
import createMiddleware from 'next-intl/middleware';
import { routing } from './i18n/routing';

// Create the next-intl middleware
const intlMiddleware = createMiddleware(routing);

// Combined middleware with authentication
export async function middleware(request: NextRequest) {    
    // Apply the intl middleware
    return intlMiddleware(request);
}

export const config = {
  // Match only internationalized pathnames
      matcher: [
        // Match all paths except for specific system paths
        '/((?!api|_next/static|_next/image|favicon\\.ico).*)',
        '/',
        '/(de|en)/:path*'
    ],
};
```

### 3. Request Configuration

```typescript
// i18n/request.ts
import { getRequestConfig } from "next-intl/server";
import { routing } from "./routing";

export default getRequestConfig(async ({ requestLocale }) => {
  // This typically corresponds to the `[locale]` segment
  let locale = await requestLocale;

  // Ensure that a valid locale is used
  if (!locale || !routing.locales.includes(locale as any)) {
    locale = routing.defaultLocale;
  }

  return {
    locale,
    messages: (await import(`../messages/${locale}.json`)).default,
    timeZone: "Asia/Tashkent",
  };
});
```

### 4. Root Layout with Providers

```typescript
// app/layout.tsx
import './globals.css';
import { Providers } from './providers';

export default function RootLayout({
    children,
}: {
    children: React.ReactNode;
}) {
    return (
        <html lang="en" suppressHydrationWarning>
            <body>
                <Providers>{children}</Providers>
            </body>
        </html>
    );
}
// app/[locale]/layout.tsx
import { NextIntlClientProvider } from "next-intl";
import { getMessages } from "next-intl/server";
import { notFound } from "next/navigation";
import { routing } from "@/i18n/routing";

export default async function LocaleLayout({
  children,
  params,
}: {
  children: React.ReactNode;
  params: Promise<{ locale: string }>;
}) {
  // Ensure that the incoming `locale` is valid
  const { locale } = await params;
  if (!routing.locales.includes(locale as any)) {
    notFound();
  }

  // Providing all messages to the client
  // side is the easiest way to get started
  const messages = await getMessages();

  return (
      <NextIntlClientProvider messages={messages} timeZone="Asia/Tashkent" locale={locale}>
        {children}
      </NextIntlClientProvider>
  );
}
```

### 5. Using Translations in Components

```typescript
// components/SomeComponent.tsx
"use client";

import { useTranslations } from "next-intl";

export function SomeComponent() {
  const t = useTranslations('ComponentNamespace');

  return (
    <div>
        <h1>{t('title')}</h1>
        <p>{t('description')}</p>
    </div>
  );
}
```

## API Integration with Elysia.js

### 1. API Client Setup

```typescript
// lib/eden.ts
import { edenTreaty } from '@elysiajs/eden';
import type { App } from '@auth-apps/api';

// For client-side usage
export const edenClient = edenTreaty<App>('/api');

// For server-side usage (middleware, server components)
export const localEdenClient = edenTreaty<App>(process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3000');
```

### 2. React Query Integration

```typescript
// lib/get-query-client.ts
import { QueryClient } from '@tanstack/react-query';
import { cache } from 'react';

export const getQueryClient = cache(() => new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 60 * 1000, // 1 minute
      gcTime: 5 * 60 * 1000, // 5 minutes
      retry: 1,
      refetchOnWindowFocus: false,
    },
  },
}));

// hooks/useData.ts
import { useQuery } from '@tanstack/react-query';
import { edenClient } from '@/lib/eden';

export function useData(id: string) {
  return useQuery({
    queryKey: ['data', id],
    queryFn: () => edenClient.api.v1.data[id].get(),
  });
}
```

### 5. Authentication Integration

```typescript
// lib/auth.ts
import { edenClient } from './eden';

export async function login(email: string, password: string) {
    return edenClient.api.v1.auth.login.post({
        body: { email, password },
    });
}

export async function logout() {
    return edenClient.api.v1.auth.logout.post();
}

// hooks/useAuth.ts
'use client'

import { getCurrentUser, login, logout } from "@/lib/auth";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { useRouter } from "next/navigation";

// Define a basic user type
interface AuthUser {
    id?: string;
    email?: string;
    name?: string | null;
}

export function useAuth() {
    const queryClient = useQueryClient();
    const router = useRouter();
    // Query to fetch current user
    const { data: user, isLoading: loading } = useQuery<AuthUser | null>({
        queryKey: ["currentUser"],
        queryFn: async () => {
            const data = await getCurrentUser();
            return data;
        },
        retry: false, // Don't retry on failure
    });

    // Mutation for login
    const loginMutation = useMutation({
        mutationFn: ({ username, password }: { username: string; password: string }) =>
            login(username, password),
        onSuccess: (data) => {
            if (data) {
                queryClient.invalidateQueries({ queryKey: ["currentUser"] });
            }
        },
    });

    // Mutation for logout
    const logoutMutation = useMutation({
        mutationFn: logout,
        onSuccess: () => {
            queryClient.setQueryData(["currentUser"], null);
            router.push("/");
        },
    });

    const signIn = (username: string, password: string) =>
        loginMutation.mutate({ username, password });

    const signOut = () => logoutMutation.mutate();

    return {
        user,
        loading,
        signIn,
        signOut,
        loginError: loginMutation.error?.message,
        isLoggingIn: loginMutation.isPending,
    };
}
```

## Data in feature pages

Don't create mock data. Always create api for needed data and use api calls using eden instead

## UI Components with shadcn/ui

### 1. shadcn/ui Configuration

```json
// components.json
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "slate",
    "cssVariables": true
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils"
  }
}
```
### 2. Utility Functions

```typescript
// lib/utils.ts
import { type ClassValue, clsx } from 'clsx';
import { twMerge } from 'tailwind-merge';

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}
```

## Form Handling with React Hook Form and Zod
### 1. Form Component

```typescript
// components/LoginForm.tsx
'use client';

import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { useAuth } from '@/hooks/useAuth';
import { useRouter } from '@/i18n/navigation';
import { useTranslations } from 'next-intl';

const loginSchema = z.object({
  email: z.string().email(),
  password: z.string().min(8),
});

type LoginFormValues = z.infer<typeof loginSchema>;

export function LoginForm() {
  const t = useTranslations('Login');
  const { login } = useAuth();
  const router = useRouter();
  
  const form = useForm<LoginFormValues>({
    resolver: zodResolver(loginSchema),
    defaultValues: {
      email: '',
      password: '',
    },
  });
  
  const onSubmit = (values: LoginFormValues) => {
    login(values, {
      onSuccess: () => {
        router.push('/dashboard');
      },
    });
  };
  return (
    <Card className="w-[400px]">
      <CardHeader>
        <h2 className="text-2xl font-semibold">Login</h2>
      </CardHeader>
      <CardContent>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
          <div className="space-y-2">
            <Input type="email" placeholder="Email" className="w-full" {...form.register('email')} />
          </div>
          <div className="space-y-2">
            <Input type="password" placeholder="Password" className="w-full" {...form.register('password')} />
          </div>
          <Button type="submit" disabled={form.formState.isSubmitting}>
            {form.formState.isSubmitting ? t('submitting') : t('submit')}
          </Button>
        </form>
      </CardContent>
    </Card>
  );
}
```

## State Management

### 1. React Query for Server State

```typescript
// app/providers.tsx
'use client';

import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { ReactQueryDevtools } from '@tanstack/react-query-devtools';
import { useState } from 'react';

export function Providers({ children }: { children: React.ReactNode }) {
  const [queryClient] = useState(() => new QueryClient({
    defaultOptions: {
      queries: {
        staleTime: 60 * 1000,
        gcTime: 5 * 60 * 1000,
        retry: 1,
        refetchOnWindowFocus: false,
      },
    },
  }));
  return (
    <QueryClientProvider client={queryClient}>
      {children}
      <ReactQueryDevtools initialIsOpen={false} />
    </QueryClientProvider>
  );
}
```

### 2. Store Pattern for Client State

```typescript
// store/users-store.ts
import { create } from 'zustand';

interface User {
  id: string;
  name: string;
  email: string;
}

interface UsersState {
  users: User[];
  selectedUser: User | null;
  setUsers: (users: User[]) => void;
  setSelectedUser: (user: User | null) => void;
  addUser: (user: User) => void;
  updateUser: (id: string, updates: Partial<User>) => void;
  deleteUser: (id: string) => void;
}

export const useUsersStore = create<UsersState>((set) => ({
  users: [],
  selectedUser: null,
  setUsers: (users) => set({ users }),
  setSelectedUser: (selectedUser) => set({ selectedUser }),
  addUser: (user) => set((state) => ({ users: [...state.users, user] })),
  updateUser: (id, updates) => set((state) => ({
    users: state.users.map((user) => (user.id === id ? { ...user, ...updates } : user)),
  })),
  deleteUser: (id) => set((state) => ({
    users: state.users.filter((user) => user.id !== id),
    selectedUser: state.selectedUser?.id === id ? null : state.selectedUser,
  })),
}));
```

## Responsive Design

### 1. Mobile Hook

```typescript
// hooks/use-mobile.ts
'use client';

import { useEffect, useState } from 'react';

export function useMobile() {
  const [isMobile, setIsMobile] = useState(false);
  
  useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth < 768);
    };
    
    // Initial check
    checkMobile();
    
    // Add event listener
    window.addEventListener('resize', checkMobile);
    
    // Cleanup
    return () => {
      window.removeEventListener('resize', checkMobile);
    };
  }, []);
  
  return isMobile;
}
```

### 2. Responsive Component Example

```typescript
// components/ResponsiveLayout.tsx
'use client';

import { useMobile } from '@/hooks/use-mobile';

export function ResponsiveLayout({ children }: { children: React.ReactNode }) {
  const isMobile = useMobile();
  
  return (
    <div className={`container mx-auto ${isMobile ? 'px-4' : 'px-8'}`}>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {children}
      </div>
    </div>
  );
}
```

## Next.js 15 and React 19 Features

### 1. Server Components

```typescript
// app/[locale]/dashboard/page.tsx
import { Suspense } from 'react';
import { getTranslations } from 'next-intl/server';
import { DashboardHeader } from '@/components/DashboardHeader';
import { DashboardContent } from '@/components/DashboardContent';
import { DashboardSkeleton } from '@/components/DashboardSkeleton';

export async function generateMetadata({ params }: { params: { locale: string } }) {
  const t = await getTranslations({ locale: params.locale, namespace: 'Dashboard' });
  
  return {
    title: t('title'),
    description: t('description'),
  };
}

export default function DashboardPage() {
  return (
    <div className="space-y-6">
      <DashboardHeader />
      <Suspense fallback={<DashboardSkeleton />}>
        <DashboardContent />
      </Suspense>
    </div>
  );
}
```

### 2. Server Actions

```typescript
// app/actions.ts
'use server';

import { revalidatePath } from 'next/cache';
import { localEdenClient } from '@/lib/eden';
import { z } from 'zod';

const userSchema = z.object({
  name: z.string().min(2),
  email: z.string().email(),
});

export async function createUser(formData: FormData) {
  const validatedFields = userSchema.safeParse({
    name: formData.get('name'),
    email: formData.get('email'),
  });
  
  if (!validatedFields.success) {
    return { error: 'Invalid fields' };
  }
  
  try {
    await localEdenClient.api.v1.users.post({
      body: validatedFields.data,
    });
    
    revalidatePath('/dashboard/users');
    return { success: true };
  } catch (error) {
    return { error: 'Failed to create user' };
  }
}
```

### 3. React 19 Hooks

```typescript
// components/OptimizedList.tsx
'use client';

import { useOptimistic, useFormStatus } from 'react';
import { experimental_useEffectEvent as useEffectEvent } from 'react';

interface Item {
  id: string;
  text: string;
}

export function OptimizedList({ items }: { items: Item[] }) {
  const [optimisticItems, addOptimisticItem] = useOptimistic(
    items,
    (state, newItem: Item) => [...state, newItem]
  );
  
  // New React 19 effect event
  const onScroll = useEffectEvent((position: number) => {
    // Handle scroll with access to latest props/state
    console.log(position, optimisticItems.length);
  });
  
  return (
    <div>
      {optimisticItems.map((item) => (
        <div key={item.id}>{item.text}</div>
      ))}
      <AddItemForm onAdd={addOptimisticItem} />
    </div>
  );
}
// Using the new useFormStatus hook
function SubmitButton() {
  const { pending } = useFormStatus();
  return (
    <button disabled={pending}>
      {pending ? 'Adding...' : 'Add Item'}
    </button>
  );
}
```
## Best Practices

### 1. Code Organization

- Use the App Router (`app/` directory) for all new projects
- Organize components by feature and reusability
- Keep business logic in separate files (lib, hooks, store)
- Use server components by default, client components when necessary
- Implement proper error handling with `error.tsx` boundaries
- Use loading states with `loading.tsx`

### 2. Performance Optimization

- Use React Query for data fetching and caching
- Implement proper image optimization using `next/image`
- Use route segments for code splitting
- Use React Suspense for data loading
- Implement proper metadata for SEO

### 3. Authentication and Authorization

- Implement authentication in middleware
- Use proper session management
- Implement role-based access control
- Protect routes based on user permissions

### 4. Error Handling

- Implement proper error boundaries
- Use proper error logging
- Handle API errors gracefully
- Show user-friendly error messages

### 5. Testing

- Write unit tests for utilities
- Write integration tests for components
- Write E2E tests for critical flows
- Use proper mocking for external dependencies

### 6. Deployment

- Use proper CI/CD
- Implement proper monitoring
- Use proper logging
- Follow proper release process
